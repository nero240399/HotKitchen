type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [hotkitchen.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/Application.kt
    visible: true
    text: |+
      package hotkitchen
      
      import hotkitchen.database.DatabaseFactory
      import hotkitchen.plugins.configureRouting
      import io.ktor.server.application.*
      import io.ktor.server.engine.*
      import io.ktor.server.netty.*
      
      fun main() {
          embeddedServer(Netty, port = 28852, module = Application::module).start(wait = true)
      }
      
      fun Application.module() {
          configureRouting()
      }
    
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.20"
          }
      }
      def ktor_version = "2.3.1"
      def jetbrains_exposed = "0.41.1"
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlin'
      apply plugin: 'kotlinx-serialization'
      
      repositories {
          mavenCentral()
      }
      
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation("org.jetbrains.kotlin:kotlin-stdlib")
          implementation("io.ktor:ktor-server-core:$ktor_version")
          implementation("io.ktor:ktor-server-netty:$ktor_version")
          implementation("ch.qos.logback:logback-classic:1.2.10")
      
          implementation("io.ktor:ktor-server-auth:$ktor_version")
          implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
      
          implementation("io.ktor:ktor-serialization:$ktor_version")
          implementation("org.jetbrains.exposed:exposed-core:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-dao:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-jdbc:$jetbrains_exposed")
          implementation("com.zaxxer:HikariCP:5.0.1")
          implementation("com.h2database:h2:2.1.214")
          implementation("org.postgresql:postgresql:42.3.8")
      }
    learner_created: false
  - name: test/HotKitchenTest.kt
    visible: false
    text: |-
      import io.ktor.client.request.*
      import io.ktor.client.statement.*
      import io.ktor.http.*
      import io.ktor.server.testing.*
      import io.ktor.util.*
      import io.ktor.utils.io.*
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.junit.Test
      
      class HotKitchenTest : StageTest<Any>() {
      
          @Serializable
          private data class Credentials(var email: String, var userType: String, var password: String)
      
          @Serializable
          private data class SignUpCredentials(var email: String, var password: String)
      
          @Serializable
          private data class Token(val token: String)
      
          private object Messages {
              const val invalidEmail = """{"status":"Invalid email"}"""
              const val invalidPassword = """{"status":"Invalid password"}"""
              const val userAlreadyExists = """{"status":"User already exists"}"""
              const val invalidEmailPassword = """{"status":"Invalid email or password"}"""
          }
      
          private val time = System.currentTimeMillis().toString()
          private val wrongEmails =
              arrayOf(
                  "@example.com",
                  time,
                  "$time@gmail",
                  "$time@mail@com",
                  "$time.gmail",
                  "$time.mail.ru",
                  "$time@yandex.ru@why",
                  "$time@yandex@ru.why",
                  "@which$time@gmail.com",
                  "$time@gmail",
                  "$time#lala@mail.us",
                  "Goose Smith <$time@example.com>",
                  "$time@example.com (Duck Smith)"
              )
          private val wrongPasswords =
              arrayOf(
                  "",
                  "ad12",
                  "ad124",
                  "password",
                  "0123456",
                  "paaaaaaaaaaaasssssword",
                  "11113123123123123"
              )
          private val jwtRegex = """^[a-zA-Z0-9]+?\.[a-zA-Z0-9]+?\..+""".toRegex()
          private val currentCredentials = Credentials("$time@mail.com", "client", "password$time")
          private lateinit var signInToken: String
          private lateinit var signUpToken: String
      
      
          @DynamicTest(order = 1)
          fun checkWrongEmail(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      for (email in wrongEmails) {
                          val response = client.post("/signup") {
                              setBody(Json.encodeToString(Credentials(email, "client", "password123")))
                              header(HttpHeaders.ContentType, ContentType.Application.Json)
                          }
                          if (response.bodyAsText() != Messages.invalidEmail || response.status != HttpStatusCode.Forbidden) {
                              result = CheckResult.wrong("Invalid email is not handled correctly.\n" +
                                          "Wrong response message or status code.\n" +
                                          "$email is invalid email")
                          }
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 2)
          fun checkWrongPassword(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      for (password in wrongPasswords) {
                          val response = client.post("/signup") {
                              setBody(Json.encodeToString(Credentials(currentCredentials.email, "client", password)))
                              header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          }
                          if (response.bodyAsText() != Messages.invalidPassword || response.status != HttpStatusCode.Forbidden)
                              result =
                                  CheckResult.wrong("Invalid password is not handled correctly.\nWrong response message or status code.\n\"$password\" is invalid password")
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 3)
          fun getSignInJWTToken(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/signup") {
                          setBody(Json.encodeToString(currentCredentials))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      try {
                          val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                          signInToken = principal.token
                          if (!signInToken.matches(jwtRegex) || signInToken.contains(currentCredentials.email))
                              result = CheckResult.wrong("Invalid JWT token")
                      } catch (e: Exception) {
                          result = CheckResult.wrong("Cannot get token form /signin request")
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 4)
          fun registerExistingUser(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/signup") {
                          setBody(Json.encodeToString(currentCredentials))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.bodyAsText() != Messages.userAlreadyExists || response.status != HttpStatusCode.Forbidden)
                          result = CheckResult.wrong("An existing user is registered. Wrong response message or status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 5)
          fun wrongAuthorization(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.post("/signin") {
                          setBody(
                              Json.encodeToString(
                                  SignUpCredentials(
                                      "why?does?this?email?exists",
                                      currentCredentials.password
                                  )
                              )
                          )
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.bodyAsText() != Messages.invalidEmailPassword || response.status != HttpStatusCode.Forbidden) {
                          result =
                              CheckResult.wrong("Error when authorizing a user using a wrong email. Wrong response message or status code.")
                          return@testApplication
                      }
      
                      response = client.post("/signin") {
                          setBody(Json.encodeToString(SignUpCredentials(currentCredentials.email, "completelyWrong123")))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.bodyAsText() != Messages.invalidEmailPassword || response.status != HttpStatusCode.Forbidden)
                          result =
                              CheckResult.wrong("Error when authorizing a user using a wrong password. Wrong response message or status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 6)
          fun getSignUpJWTToken(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/signin") {
                          setBody(
                              Json.encodeToString(
                                  SignUpCredentials(
                                      currentCredentials.email,
                                      currentCredentials.password
                                  )
                              )
                          )
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      try {
                          val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                          signUpToken = principal.token
                          if (!signUpToken.matches(jwtRegex) || signUpToken.contains(currentCredentials.email))
                              result = CheckResult.wrong("Invalid JWT token")
                      } catch (e: Exception) {
                          result = CheckResult.wrong("Cannot get token form /signin request")
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 7)
          fun wrongValidation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.get("/validate") {
                          header(
                              HttpHeaders.Authorization,
                              "Bearer lala${(100..999).random()}.blo${(100..999).random()}blo.kek${(100..999).random()}"
                          )
                      }
                      if (response.status != HttpStatusCode.Unauthorized) {
                          result =
                              CheckResult.wrong("Wrong status code when authorizing with a completely wrong token using /validate")
                          return@testApplication
                      }
                      response = client.get("/validate") {
                          header(HttpHeaders.Authorization, signInToken)
                      }
                      if (response.status != HttpStatusCode.Unauthorized)
                          result =
                              CheckResult.wrong("Wrong status code when authorizing with a JWT token using /validate. " +
                                      "Do you use \"Bearer\" in header?")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 8)
          fun correctValidation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signInToken")
                      }
                      if (response.status != HttpStatusCode.OK || response.bodyAsText()
                          != "Hello, ${currentCredentials.userType} ${currentCredentials.email}") {
                          result = CheckResult.wrong(
                              "Token validation with signin token failed.\nStatus code should be \"200 OK\"\n" +
                                      "Message should be \"Hello, " +
                                      "${currentCredentials.userType} ${currentCredentials.email}\""
                          )
                          return@testApplication
                      }
      
                      response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signUpToken")
                      }
                      if (response.status != HttpStatusCode.OK
                          || response.bodyAsText() != "Hello, ${currentCredentials.userType} ${currentCredentials.email}"
                      )
                          result = CheckResult.wrong(
                              "Token validation with signup token failed.\n" +
                                      "Status code should be \"200 OK\"\nMessage should be \"Hello, " +
                                      "${currentCredentials.userType} ${currentCredentials.email}\""
                          )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      }
    learner_created: false
  - name: src/authentication/AuthenticationRoute.kt
    visible: true
    text: |-
      package hotkitchen.authentication
      
      import hotkitchen.model.Response
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.request.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      
      fun Route.authenticationRoute(authenticationDao: AuthenticationDao) {
          post("/signin") {
              val userAuthentication = call.receive<UserAuthentication>()
              try {
                  authenticationDao.signIn(userAuthentication)
                  call.response.status(HttpStatusCode.OK)
                  call.respondText { Json.encodeToString(Response("Signed In")) }
              } catch (e: Exception) {
                  call.response.status(HttpStatusCode.Forbidden)
                  call.respondText { Json.encodeToString(Response("Authorization failed")) }
              }
          }
      }
    learner_created: true
  - name: src/authentication/AuthenticationModel.kt
    visible: true
    text: |
      package hotkitchen.authentication
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserAuthentication(
          val email: String,
          val password: String
      )
    learner_created: true
  - name: src/database/entities/UserEntity.kt
    visible: true
    text: |-
      package hotkitchen.database.entities
      
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.Column
      
      object UserEntity : IntIdTable() {
          val email: Column<String> = varchar("email", 50)
          val userType: Column<String> = varchar("userType", 50)
          val password: Column<String> = varchar("password", 50)
      }
    learner_created: true
  - name: src/database/DatabaseConnection.kt
    visible: true
    text: |-
      package hotkitchen.database
      
      import hotkitchen.database.entities.UserEntity
      import io.ktor.server.application.*
      import org.jetbrains.exposed.sql.*
      import org.jetbrains.exposed.sql.Database
      import org.jetbrains.exposed.sql.transactions.transaction
      
      object DatabaseConnection {
          private val db = Database.connect(
              "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false",
              driver = "org.h2.Driver"
          )
      
          fun init() {
              transaction(db) {
                  addLogger(StdOutSqlLogger)
                  SchemaUtils.create(UserEntity)
              }
          }
      
          fun <T> execute(blk: Transaction.() -> T): T =
              transaction(db, statement = blk)
      }
      
      fun Application.setupDb() {
          DatabaseConnection.init()
      }
    learner_created: true
  - name: src/user/UserDao.kt
    visible: true
    text: |-
      package hotkitchen.user
      
      interface UserDao {
          fun signUp(user: User)
      }
    learner_created: true
  - name: src/authentication/AuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.authentication
      
      interface AuthenticationDao {
          fun signIn(userAuthentication: UserAuthentication)
      }
    learner_created: true
  - name: src/database/daos/DefaultAuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.authentication.AuthenticationDao
      import hotkitchen.authentication.UserAuthentication
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserEntity
      import org.jetbrains.exposed.sql.select
      
      class DefaultAuthenticationDao : AuthenticationDao {
          override fun signIn(userAuthentication: UserAuthentication) {
              DatabaseConnection.execute {
                  UserEntity.select {
                      UserEntity.email eq userAuthentication.email
                      UserEntity.password eq userAuthentication.password
                  }.singleOrNull() ?: throw Exception("User $id not found")
              }
          }
      }
    learner_created: true
  - name: src/database/daos/DefaultUserDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserEntity
      import hotkitchen.user.User
      import hotkitchen.user.UserDao
      import org.jetbrains.exposed.sql.insert
      import org.jetbrains.exposed.sql.select
      
      class DefaultUserDao : UserDao {
          override fun signUp(user: User) {
              DatabaseConnection.execute {
                  if (UserEntity.select {
                          UserEntity.email eq user.email
                      }.firstOrNull() != null) {
                      throw Exception("User $id existed")
                  }
                  UserEntity.insert {
                      it[email] = user.email
                      it[userType] = user.userType
                      it[password] = user.password
                  }
              }
          }
      }
    learner_created: true
  - name: src/validate/ValidateRoute.kt
    visible: true
    learner_created: true
  - name: src/models/Response.kt
    visible: true
    text: |
      package hotkitchen.model
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Response(val status: String)
    learner_created: true
  - name: src/models/UserModel.kt
    visible: true
    text: |
      package hotkitchen.user
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class User(
          val email: String,
          val userType: String,
          val password: String
      )
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/22604#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 05 Nov 2023 00:41:20 UTC"
record: 2
