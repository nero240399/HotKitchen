type: edu
files:
  - name: src/plugins/Routing.kt
    visible: true
    text: |
      package hotkitchen.plugins
      
      import database.User
      import hotkitchen.database.DatabaseFactory
      import hotkitchen.model.UserModel
      import hotkitchen.model.UserResponse
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.request.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.jetbrains.exposed.sql.SchemaUtils
      import org.jetbrains.exposed.sql.insert
      import org.jetbrains.exposed.sql.select
      import org.jetbrains.exposed.sql.transactions.transaction
      
      
      fun Application.configureRouting() {
          routing {
              post("/signup") {
                  val user = Json.decodeFromString<UserModel>(call.receiveText())
                  DatabaseFactory.connect()
                  transaction {
                      SchemaUtils.createMissingTablesAndColumns(User)
                  }
                  var check = true
                  transaction {
                      val selectedUser = User.select {
                          User.email eq user.email
                      }.firstOrNull()
                      if (selectedUser != null) {
                          check = false
                      }
                  }
                  if (!check) {
                      call.response.status(HttpStatusCode(403, "Forbidden"))
                      call.respond(Json.encodeToString(UserResponse("Registration failed")))
                      return@post
                  }
                  transaction {
                      User.insert {
                          it[email] = user.email
                          it[userType] = user.userType
                          it[password] = user.password
                      }
                  }
                  call.response.status(HttpStatusCode(200, "OK"))
                  call.respond(Json.encodeToString(UserResponse("Signed Up")))
              }
      
              post("/signin") {
                  val user = Json { isLenient = true }.decodeFromString<UserModel>(call.receiveText())
                  DatabaseFactory.connect()
                  var check = true
                  transaction {
                      val selectedUser = User.select {
                          User.email eq user.email
                          User.password eq user.password
                      }.firstOrNull()
                      if (selectedUser == null) {
                          check = false
                      }
                  }
                  if (!check) {
                      call.response.status(HttpStatusCode(403, "Forbidden"))
                      call.respond(Json.encodeToString(UserResponse("Authorization failed")))
                      return@post
                  }
                  call.response.status(HttpStatusCode(200, "OK"))
                  call.respond(Json.encodeToString(UserResponse("Signed In")))
              }
          }
      }
    learner_created: false
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [hotkitchen.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/Application.kt
    visible: true
    text: |+
      package hotkitchen
      
      import hotkitchen.database.DatabaseFactory
      import hotkitchen.plugins.configureRouting
      import io.ktor.server.application.*
      import io.ktor.server.engine.*
      import io.ktor.server.netty.*
      
      fun main() {
          embeddedServer(Netty, port = 28852, module = Application::module).start(wait = true)
      }
      
      fun Application.module() {
          configureRouting()
      }
    
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.20"
          }
      }
      def ktor_version = "2.3.1"
      def jetbrains_exposed = "0.41.1"
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlin'
      apply plugin: 'kotlinx-serialization'
      
      repositories {
          mavenCentral()
      }
      
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation("org.jetbrains.kotlin:kotlin-stdlib")
          implementation("io.ktor:ktor-server-core:$ktor_version")
          implementation("io.ktor:ktor-server-netty:$ktor_version")
          implementation("ch.qos.logback:logback-classic:1.2.10")
      
          implementation("io.ktor:ktor-server-auth:$ktor_version")
          implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
      
          implementation("io.ktor:ktor-serialization:$ktor_version")
          implementation("org.jetbrains.exposed:exposed-core:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-dao:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-jdbc:$jetbrains_exposed")
          implementation("com.zaxxer:HikariCP:5.0.1")
          implementation("com.h2database:h2:2.1.214")
          implementation("org.postgresql:postgresql:42.3.8")
      }
    learner_created: false
  - name: src/model/UserResponse.kt
    visible: true
    text: |
      package hotkitchen.model
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserResponse(val status: String)
    learner_created: false
  - name: src/database/DatabaseFactory.kt
    visible: true
    text: |-
      package hotkitchen.database
      
      import database.User
      import org.jetbrains.exposed.sql.Database
      import org.jetbrains.exposed.sql.SchemaUtils
      import org.jetbrains.exposed.sql.transactions.transaction
      
      object DatabaseFactory {
          private val driverClassName = "org.h2.Driver"
          private val jdbcURL = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false"
      
          fun connect(): Database {
              return Database.connect(jdbcURL, driverClassName)
          }
      }
    learner_created: false
  - name: src/model/UserAuthentication.kt
    visible: true
    text: |
      package hotkitchen.model
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserModel(
          val email: String,
          val userType: String = "",
          val password: String
      )
    learner_created: false
  - name: src/database/User.kt
    visible: true
    text: |-
      package database
      
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.Column
      
      object User : IntIdTable() {
          val email: Column<String> = varchar("name", 50)
          val userType: Column<String> = varchar("userType", 50)
          val password: Column<String> = varchar("password", 50)
      }
    learner_created: false
  - name: test/testdata/Credentials.kt
    visible: false
    text: |
      package testdata
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Credentials(var email: String, var userType: String, var password: String)
    learner_created: false
  - name: test/testdata/Meal.kt
    visible: false
    text: |-
      package testdata
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Meal(
          val mealId: Int,
          val title: String,
          val price: Float,
          val imageUrl: String,
          val categoryIds: List<Int>
      )
    learner_created: false
  - name: test/testdata/Order.kt
    visible: false
    text: |-
      package testdata
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Order(
          var orderId: Int,
          val userEmail: String,
          val mealsIds: List<Int>,
          val price: Float,
          val address: String,
          val status: String
      )
    learner_created: false
  - name: test/testdata/Token.kt
    visible: false
    text: |-
      package testdata
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Token(val token: String)
    learner_created: false
  - name: test/testdata/User.kt
    visible: false
    text: |-
      package testdata
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class User(
          val name: String, val userType: String, val phone: String, val email: String, val address: String
      )
    learner_created: false
  - name: test/HotKitchenTest.kt
    visible: false
    text: |-
      import com.typesafe.config.ConfigFactory
      import io.ktor.client.request.*
      import io.ktor.client.statement.*
      import io.ktor.server.config.*
      import io.ktor.http.*
      import io.ktor.server.testing.*
      import kotlinx.serialization.decodeFromString
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import testdata.*
      
      class HotKitchenTest : StageTest<Any>() {
      
          private val time = System.currentTimeMillis()
          private val jwtRegex = """^[a-zA-Z0-9]+?\.[a-zA-Z0-9]+?\..+""".toRegex()
          private val currentCredentialsClient = Credentials("$time@client.com", "client", "password$time")
          private var currentUserClient = User(
              time.toString() + "name",
              "client",
              "+79999999999",
              currentCredentialsClient.email,
              time.toString() + "address"
          )
          private val currentCredentialsStaff = Credentials("$time@staff.com", "staff", "password$time")
          private val currentMeals = arrayOf(
              Meal(
                  time.toInt(),
                  "$time title1",
                  (time.toInt() % 100).toFloat(),
                  "image $time url",
                  listOf((0..10).random(), (0..10).random(), (0..10).random())
              ),
              Meal(
                  time.toInt() + 1,
                  "$time title1",
                  (time.toInt() % 100).toFloat(),
                  "image $time url",
                  listOf((0..10).random(), (0..10).random(), (0..10).random())
              ),
              Meal(
                  time.toInt() + 2,
                  "$time title1",
                  (time.toInt() % 100).toFloat(),
                  "image $time url",
                  listOf((0..10).random(), (0..10).random(), (0..10).random())
              )
          )
          private val accessDenied = """{"status":"Access denied"}"""
      
          private val price = currentMeals[0].price + currentMeals[1].price + currentMeals[2].price
          private val mealsIds = listOf(currentMeals[0].mealId, currentMeals[1].mealId, currentMeals[2].mealId)
          private val currentOrder =
              Order(time.toInt(), currentCredentialsClient.email, mealsIds, price, currentUserClient.address, "COOK")
      
          private lateinit var signInTokenClient: String
          private lateinit var signInTokenStaff: String
      
          private var incompleteSize = 0
      
      
          @DynamicTest(order = 1)
          fun getSignInJWTToken(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.post("/signup") {
                          setBody(Json.encodeToString(currentCredentialsClient))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      try {
                          val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                          signInTokenClient = principal.token
                          if (!signInTokenClient.matches(jwtRegex) || signInTokenClient.contains(currentCredentialsClient.email))
                              result = CheckResult.wrong("Invalid JWT token")
                          return@testApplication
                      } catch (e: Exception) {
                          result = CheckResult.wrong("Cannot get token form /signup request")
                      }
      
                      response = client.post("/signin") {
                          setBody(Json.encodeToString(currentCredentialsStaff))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      try {
                          val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                          signInTokenStaff = principal.token
                          if (!signInTokenStaff.matches(jwtRegex) || signInTokenStaff.contains(currentCredentialsStaff.email))
                              result = CheckResult.wrong("Invalid JWT token")
                          return@testApplication
                      } catch (e: Exception) {
                          result = CheckResult.wrong("Cannot get token form /signin request")
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 2)
          fun correctValidation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.OK
                          || response.bodyAsText() != "Hello, ${currentCredentialsClient.userType} ${currentCredentialsClient.email}") {
                          result = CheckResult.wrong(
                              "testdata.Token validation with signin token failed.\nStatus code should be \"200 OK\"\n" +
                                      "Message should be \"Hello, ${currentCredentialsClient.userType} ${currentCredentialsClient.email}\"")
                          return@testApplication
                      }
                      response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                      }
                      if (response.status != HttpStatusCode.OK
                          || response.bodyAsText() != "Hello, ${currentCredentialsStaff.userType} ${currentCredentialsStaff.email}") {
                          result = CheckResult.wrong(
                              "testdata.Token validation with signin token failed.\nStatus code should be \"200 OK\"\n" +
                                      "Message should be \"Hello, ${currentCredentialsStaff.userType} ${currentCredentialsStaff.email}\"")
                          return@testApplication
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 3)
          fun createUser(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.put("/me") {
                          setBody(Json.encodeToString(currentUserClient))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Cannot add user by put method")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 4)
          fun successAdditionMeal(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      lateinit var response: HttpResponse
                      for (meal in currentMeals)
                          response = client.post("/meals") {
                              setBody(Json.encodeToString(meal))
                              header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                              header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          }
                              if (response.status != HttpStatusCode.OK) {
                                  result = CheckResult.wrong("The meal was not added. Wrong status code.")
                                  return@testApplication
                              }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 5)
          fun invalidOrderCreation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/order") {
                          setBody(Json.encodeToString(listOf(1, 2, (-9999999..-9999).random())))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.BadRequest)
                          result = CheckResult.wrong("Created an order with the wrong meal id. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 6)
          fun validOrderCreation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post( "/order") {
                          setBody(Json.encodeToString(mealsIds))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.OK) {
                          result = CheckResult.wrong("Unable to create order. Wrong status code.")
                          return@testApplication
                      }
                      val order = Json.decodeFromString<Order>(response.bodyAsText() ?: "")
                      if (order.userEmail != currentOrder.userEmail || order.price != currentOrder.price || order.address != currentOrder.address || order.status != currentOrder.status) {
                          result = CheckResult.wrong("Wrong order.")
                          return@testApplication
                      }
                      else currentOrder.orderId = order.orderId
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 7)
          fun invalidMarkAsReady(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/order/${currentOrder.orderId}/markReady") {
                          setBody(Json.encodeToString(mealsIds))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.Forbidden || response.bodyAsText() != accessDenied)
                          result = CheckResult.wrong("Only staff can mark order as COMPLETE. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 8)
          fun validMarkAsReady(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/order/${currentOrder.orderId}/markReady") {
                          setBody(Json.encodeToString(mealsIds))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Unable to mark order as COMPLETE. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 9)
          fun getOrders(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/orderHistory") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      val orders: List<Order> = Json.decodeFromString(response.bodyAsText() ?: "")
                      var flag = true
                      for (order in orders) {
                          if (order.status == "COOK") incompleteSize++
                          if (order.orderId == currentOrder.orderId) flag = false
                      }
                      if (flag) {
                          result = CheckResult.wrong("Wrong orders list. The newly added order is missing.")
                          return@testApplication
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Wrong status code in /orderHistory")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 10)
          fun getIncompleteOrders(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/orderIncomplete") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      val orders: List<Order> = Json.decodeFromString(response.bodyAsText() ?: "")
                      for (order in orders)
                          if (order.status != "COOK") {
                              result = CheckResult.wrong("One of the orders is COMPLETE.")
                              return@testApplication
                          }
                      if (orders.size != incompleteSize) {
                          result = CheckResult.wrong("Invalid size of Incomplete orders.")
                          return@testApplication
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Wrong status code in /orderHistory")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/22607#comment
status: Unchecked
record: -1
