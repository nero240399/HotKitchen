type: edu
files:
  - name: src/Application.kt
    visible: true
    text: |-
      package hotkitchen
      
      
      import hotkitchen.plugins.configureRouting
      import io.ktor.server.application.*
      
      fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)
      
      fun Application.module(testing: Boolean = false) {
          configureRouting()
      }
    learner_created: false
  - name: test/HotKitchenTest.kt
    visible: false
    text: |-
      import com.typesafe.config.ConfigFactory
      import io.ktor.client.request.*
      import io.ktor.client.statement.*
      import io.ktor.server.config.*
      import io.ktor.http.*
      import io.ktor.server.testing.*
      import io.ktor.util.*
      import io.ktor.utils.io.*
      import org.apache.commons.logging.Log
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      
      class HotKitchenTest : StageTest<Any>() {
      
          private val email = System.currentTimeMillis().toString() + "jmail.com"
          private val password = (System.currentTimeMillis() % 100_000_000).toString()
      
          private val signedIn = """{"status":"Signed In"}"""
          private val signedUp = """{"status":"Signed Up"}"""
          private val registrationFailed = """{"status":"Registration failed"}"""
          private val authorizationFailed = """{"status":"Authorization failed"}"""
          private val currentCredentials = """{"email":"$email","userType":"testUser","password":"correct$password"}"""
          private val currentWrongSignIn = """{"email":"$email","password":"wrong$password"}"""
          private val currentCorrectSignIn = """{"email":"$email","password":"correct$password"}"""
      
      
          @DynamicTest(order = 1)
          fun registerNewUser(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/signup"){
                          setBody(currentCredentials)
                          header(HttpHeaders.ContentType, ContentType.Application.Json)
                      }
                      if (response.bodyAsText() != signedUp || response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong(
                              "Cannot register a new user. Wrong response message or status code."
                          )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
      
          @DynamicTest(order = 2)
          fun registerExistingUser(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication{
                      val response = client.post("/signup"){
                          setBody(currentCredentials)
                          header(HttpHeaders.ContentType, ContentType.Application.Json)
                      }
                      if (response.bodyAsText() != registrationFailed || response.status != HttpStatusCode.Forbidden)
                          result = CheckResult.wrong(
                              "An existing user is registered. Wrong response message or status code."
                          )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 3)
          fun wrongAuthorization(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication{
                      val response = client.post("/signin"){
                          setBody(currentWrongSignIn)
                          header(HttpHeaders.ContentType, ContentType.Application.Json)
                      }
                      if (response.bodyAsText() != authorizationFailed || response.status != HttpStatusCode.Forbidden)
                          result = CheckResult.wrong(
                              "Error when authorizing a user using a wrong password. Wrong response message or status code."
                          )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 4)
          fun correctAuthorization(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication{
                      val response = client.post("/signin"){
                          setBody(currentCorrectSignIn)
                          header(HttpHeaders.ContentType, ContentType.Application.Json)
                      }
                      if (response.bodyAsText() != signedIn || response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong(
                              "Error when authorizing a user using a correct password. Wrong response message or status code."
                          )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.20"
          }
      }
      def ktor_version = "2.3.1"
      def jetbrains_exposed = "0.41.1"
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlin'
      apply plugin: 'kotlinx-serialization'
      
      repositories {
          mavenCentral()
      }
      
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation("org.jetbrains.kotlin:kotlin-stdlib")
          implementation("io.ktor:ktor-server-core:$ktor_version")
          implementation("io.ktor:ktor-server-netty:$ktor_version")
          implementation("ch.qos.logback:logback-classic:1.2.10")
      
          implementation("io.ktor:ktor-server-auth:$ktor_version")
          implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
      
          implementation("io.ktor:ktor-serialization:$ktor_version")
          implementation("org.jetbrains.exposed:exposed-core:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-dao:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-jdbc:$jetbrains_exposed")
          implementation("com.zaxxer:HikariCP:5.0.1")
          implementation("org.postgresql:postgresql:42.3.8")
      }
    learner_created: false
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [hotkitchen.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/authentication/AuthenticationRoute.kt
    visible: true
    learner_created: true
  - name: src/model/Response.kt
    visible: true
    learner_created: true
  - name: src/authentication/AuthenticationModel.kt
    visible: true
    learner_created: true
  - name: src/user/User.kt
    visible: true
    learner_created: true
  - name: src/user/UserRoute.kt
    visible: true
    learner_created: true
  - name: src/database/entities/UserEntity.kt
    visible: true
    learner_created: true
  - name: src/authentication/AuthenticationDao.kt
    visible: true
    learner_created: true
  - name: src/user/UserDao.kt
    visible: true
    learner_created: true
  - name: src/database/daos/DefaultAuthenticationDao.kt
    visible: true
    learner_created: true
  - name: src/database/daos/DefaultUserDao.kt
    visible: true
    learner_created: true
  - name: src/database/DatabaseConnection.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/22603#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 04 Nov 2023 07:25:49 UTC"
record: 1
