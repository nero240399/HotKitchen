type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [hotkitchen.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/Application.kt
    visible: true
    text: |+
      package hotkitchen
      
      import hotkitchen.database.DatabaseFactory
      import hotkitchen.plugins.configureRouting
      import io.ktor.server.application.*
      import io.ktor.server.engine.*
      import io.ktor.server.netty.*
      
      fun main() {
          embeddedServer(Netty, port = 28852, module = Application::module).start(wait = true)
      }
      
      fun Application.module() {
          configureRouting()
      }
    
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.20"
          }
      }
      def ktor_version = "2.3.1"
      def jetbrains_exposed = "0.41.1"
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlin'
      apply plugin: 'kotlinx-serialization'
      
      repositories {
          mavenCentral()
      }
      
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation("org.jetbrains.kotlin:kotlin-stdlib")
          implementation("io.ktor:ktor-server-core:$ktor_version")
          implementation("io.ktor:ktor-server-netty:$ktor_version")
          implementation("ch.qos.logback:logback-classic:1.2.10")
      
          implementation("io.ktor:ktor-server-auth:$ktor_version")
          implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
      
          implementation("io.ktor:ktor-serialization:$ktor_version")
          implementation("org.jetbrains.exposed:exposed-core:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-dao:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-jdbc:$jetbrains_exposed")
          implementation("com.zaxxer:HikariCP:5.0.1")
          implementation("com.h2database:h2:2.1.214")
          implementation("org.postgresql:postgresql:42.3.8")
      }
    learner_created: false
  - name: src/validate/ValidateRoute.kt
    visible: true
    text: |-
      package hotkitchen.validate
      
      import hotkitchen.user.UserDao
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.auth.*
      import io.ktor.server.auth.jwt.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      
      fun Route.validateRoute(userDao: UserDao) {
      
          authenticate {
              get("/validate") {
                  try {
                      val principal = call.principal<JWTPrincipal>()
                      val email = principal!!.payload.getClaim("email").asString()
                      val user = userDao.getUser(email)
                      call.respond(HttpStatusCode.OK, "Hello, ${user?.userType} $email")
                  } catch (e: Exception) {
                      call.respond(HttpStatusCode.InternalServerError, e.message!!)
                  }
              }
          }
      }
    learner_created: true
  - name: src/authentication/AuthenticationRoute.kt
    visible: true
    text: |-
      package hotkitchen.authentication
      
      import com.auth0.jwt.JWT
      import com.auth0.jwt.algorithms.Algorithm
      import hotkitchen.Secret
      import hotkitchen.database.daos.InvalidEmailOrPassword
      import hotkitchen.model.Response
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.request.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.jetbrains.exposed.sql.Except
      
      fun Route.authenticationRoute(authenticationDao: AuthenticationDao) {
          post("/signin") {
              val userAuthentication = call.receive<UserAuthentication>()
              try {
                  val tokenAuthentication = JWT.create()
                      .withClaim("email", userAuthentication.email)
                      .withClaim("password", userAuthentication.password)
                      .sign(Algorithm.HMAC256(Secret))
                  val token = authenticationDao.signIn(userAuthentication.copy(password = tokenAuthentication))
                  call.response.status(HttpStatusCode.OK)
                  call.respondText { Json.encodeToString(Response(token = token)) }
              } catch (e: Exception) {
                  call.respondText(
                      Json.encodeToString(Response(e.message!!)),
                      ContentType.Application.Json,
                      HttpStatusCode.Forbidden
                  )
              }
          }
      }
    learner_created: true
  - name: src/database/DatabaseConnection.kt
    visible: true
    text: |-
      package hotkitchen.database
      
      import hotkitchen.database.entities.UserEntity
      import io.ktor.server.application.*
      import org.jetbrains.exposed.sql.*
      import org.jetbrains.exposed.sql.Database
      import org.jetbrains.exposed.sql.transactions.transaction
      
      object DatabaseConnection {
          private val db = Database.connect(
              "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false",
              driver = "org.h2.Driver"
          )
      
          fun init() {
              transaction(db) {
                  addLogger(StdOutSqlLogger)
                  SchemaUtils.create(UserEntity)
              }
          }
      
          fun <T> execute(blk: Transaction.() -> T): T =
              transaction(db, statement = blk)
      }
      
      fun Application.setupDb() {
          DatabaseConnection.init()
      }
    learner_created: true
  - name: src/user/UserDao.kt
    visible: true
    text: |-
      package hotkitchen.user
      
      interface UserDao {
      
          fun signUp(user: User)
      
          fun getUser(email: String): User?
      }
    learner_created: true
  - name: src/authentication/AuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.authentication
      
      interface AuthenticationDao {
          fun signIn(userAuthentication: UserAuthentication): String
      }
    learner_created: true
  - name: src/database/daos/DefaultAuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.authentication.AuthenticationDao
      import hotkitchen.authentication.UserAuthentication
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserEntity
      import org.jetbrains.exposed.sql.select
      
      class DefaultAuthenticationDao : AuthenticationDao {
          override fun signIn(userAuthentication: UserAuthentication): String {
              var password = ""
              DatabaseConnection.execute {
                  val user = UserEntity.select {
                      UserEntity.email eq userAuthentication.email
                      UserEntity.password eq userAuthentication.password
                  }.singleOrNull() ?: throw InvalidEmailOrPassword
                  password = user[UserEntity.password]
              }
              return password
          }
      }
      
      object InvalidEmailOrPassword : Exception("Invalid email or password") {
          private fun readResolve(): Any = InvalidEmailOrPassword
      }
    learner_created: true
  - name: src/database/daos/DefaultUserDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserEntity
      import hotkitchen.user.User
      import hotkitchen.user.UserDao
      import org.jetbrains.exposed.sql.insert
      import org.jetbrains.exposed.sql.select
      
      class DefaultUserDao : UserDao {
      
          override fun signUp(user: User) {
              DatabaseConnection.execute {
                  if (UserEntity.select {
                          UserEntity.email eq user.email
                      }.firstOrNull() != null) {
                      throw UserAlreadyExists
                  }
                  UserEntity.insert {
                      it[email] = user.email
                      it[userType] = user.userType
                      it[password] = user.password
                  }
              }
          }
      
          override fun getUser(email: String): User? {
              var user: User? = null
              DatabaseConnection.execute {
                  user = UserEntity.select {
                      UserEntity.email eq email
                  }.singleOrNull()?.let {
                      User(
                          email = it[UserEntity.email],
                          password = it[UserEntity.password],
                          userType = it[UserEntity.userType],
                      )
                  }
              }
              return user
          }
      }
      
      object UserAlreadyExists : Exception("User already exists") {
          private fun readResolve(): Any = UserAlreadyExists
      }
    learner_created: true
  - name: src/models/Response.kt
    visible: true
    text: |
      package hotkitchen.models
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Response(
          val status: String = "",
          val token: String = ""
      )
    learner_created: true
  - name: src/database/entities/UserAuthenticationEntity.kt
    visible: true
    text: |-
      package hotkitchen.database.entities
      
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.Column
      
      object UserEntity : IntIdTable() {
          val email: Column<String> = varchar("email", 50)
          val userType: Column<String> = varchar("userType", 50)
          val password: Column<String> = varchar("password", 200)
      }
    learner_created: true
  - name: src/user/UserInfo.kt
    visible: true
    learner_created: true
  - name: src/authentication/UserAuthentication.kt
    visible: true
    text: |
      package hotkitchen.authentication
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserAuthentication(
          val email: String,
          val password: String
      )
    learner_created: true
  - name: src/user/UserRoute.kt
    visible: true
    learner_created: true
  - name: src/database/entities/UserInfoEntity.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/22605#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 05 Nov 2023 02:59:18 UTC"
record: 4
