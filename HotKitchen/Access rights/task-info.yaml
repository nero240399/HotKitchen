type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [hotkitchen.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/Application.kt
    visible: true
    text: |+
      package hotkitchen
      
      import hotkitchen.database.DatabaseFactory
      import hotkitchen.plugins.configureRouting
      import io.ktor.server.application.*
      import io.ktor.server.engine.*
      import io.ktor.server.netty.*
      
      fun main() {
          embeddedServer(Netty, port = 28852, module = Application::module).start(wait = true)
      }
      
      fun Application.module() {
          configureRouting()
      }
    
    
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:1.8.20"
          }
      }
      def ktor_version = "2.3.1"
      def jetbrains_exposed = "0.41.1"
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlin'
      apply plugin: 'kotlinx-serialization'
      
      repositories {
          mavenCentral()
      }
      
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation("org.jetbrains.kotlin:kotlin-stdlib")
          implementation("io.ktor:ktor-server-core:$ktor_version")
          implementation("io.ktor:ktor-server-netty:$ktor_version")
          implementation("ch.qos.logback:logback-classic:1.2.10")
      
          implementation("io.ktor:ktor-server-auth:$ktor_version")
          implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
      
          implementation("io.ktor:ktor-serialization:$ktor_version")
          implementation("org.jetbrains.exposed:exposed-core:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-dao:$jetbrains_exposed")
          implementation("org.jetbrains.exposed:exposed-jdbc:$jetbrains_exposed")
          implementation("com.zaxxer:HikariCP:5.0.1")
          implementation("com.h2database:h2:2.1.214")
          implementation("org.postgresql:postgresql:42.3.8")
      }
    learner_created: false
  - name: test/HotKitchenTest.kt
    visible: false
    text: |-
      import com.typesafe.config.ConfigFactory
      import io.ktor.client.request.*
      import io.ktor.client.statement.*
      import io.ktor.server.config.*
      import io.ktor.http.*
      import io.ktor.server.testing.*
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.decodeFromString
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      
      class HotKitchenTest : StageTest<Any>() {
      
          @Serializable
          private data class Credentials(var email: String, var userType: String, var password: String)
      
          @Serializable
          private data class Token(val token: String)
      
          @Serializable
          data class Meal(
              val mealId: Int,
              val title: String,
              val price: Float,
              val imageUrl: String,
              val categoryIds: List<Int>
          )
      
          @Serializable
          data class Category(
              val categoryId: Int,
              val title: String,
              val description: String
          )
      
          private val time = System.currentTimeMillis()
          private val jwtRegex = """^[a-zA-Z0-9]+?\.[a-zA-Z0-9]+?\..+""".toRegex()
          private val accessDenied = """{"status":"Access denied"}"""
          private val currentCredentialsClient = Credentials("$time@client.com", "client", "password$time")
          private val currentCredentialsStaff = Credentials("$time@staff.com", "staff", "password$time")
          private val currentMeal = Meal(
              time.toInt(),
              "$time title",
              (time.toInt() % 100).toFloat(),
              "image $time url",
              listOf((0..10).random(), (0..10).random(), (0..10).random())
          )
          private val currentCategory = Category(
              time.toInt(),
              "$time TITLE",
              "Awesome $time description"
          )
          private lateinit var signInTokenClient: String
          private lateinit var signInTokenStaff: String
      
      
          @DynamicTest(order = 1)
          fun getSignInJWTToken(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.post("/signup") {
                          setBody(Json.encodeToString(currentCredentialsClient))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                          try {
                              val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                              signInTokenClient = principal.token
                              if (!signInTokenClient.matches(jwtRegex) || signInTokenClient.contains(currentCredentialsClient.email)) {
                                  result = CheckResult.wrong("Invalid JWT token")
                                  return@testApplication
                              }
                          } catch (e: Exception) {
                              result = CheckResult.wrong("Cannot get token form /signup request")
                          }
      
                      response = client.post("/signin") {
                          setBody(Json.encodeToString(currentCredentialsStaff))
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                          try {
                              val principal = Json.decodeFromString<Token>(response.bodyAsText() ?: "")
                              signInTokenStaff = principal.token
                              if (!signInTokenStaff.matches(jwtRegex) || signInTokenStaff.contains(currentCredentialsStaff.email))
                                  result = CheckResult.wrong("Invalid JWT token")
                          } catch (e: Exception) {
                              result = CheckResult.wrong("Cannot get token form /signin request")
                          }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 2)
          fun correctValidation(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      var response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.status != HttpStatusCode.OK
                          || response.bodyAsText() != "Hello, ${currentCredentialsClient.userType} ${currentCredentialsClient.email}") {
                          result = CheckResult.wrong(
                              "Token validation with signin token failed.\n" +
                                      "Status code should be \"200 OK\"\n" +
                                      "Message should be \"Hello, ${currentCredentialsClient.userType} ${currentCredentialsClient.email}\""
                          )
                          return@testApplication
                      }
      
                      response = client.get("/validate") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                      }
                      if (response.status != HttpStatusCode.OK
                          || response.bodyAsText() != "Hello, ${currentCredentialsStaff.userType} ${currentCredentialsStaff.email}")
                          result = CheckResult.wrong(
                          "Token validation with signin token failed.\n" +
                                  "Status code should be \"200 OK\"\n" +
                                  "Message should be \"Hello, ${currentCredentialsStaff.userType} ${currentCredentialsStaff.email}\""
                      )
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 3)
          fun accessDeniedAdditionMeal(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/meals") {
                          setBody(Json.encodeToString(currentMeal))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.Forbidden || response.bodyAsText() != accessDenied)
                          result = CheckResult.wrong("Only staff can add meal. Wrong response or status code")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 4)
          fun accessDeniedAdditionCategory(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/categories") {
                          setBody(Json.encodeToString(currentCategory))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.Forbidden || response.bodyAsText() != accessDenied)
                          result = CheckResult.wrong("Only staff can add category. Wrong response or status code")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 5)
          fun successAdditionMeal(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/meals") {
                          setBody(Json.encodeToString(currentMeal))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("The meal was not added. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 6)
          fun failedAdditionMeal(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/meals") {
                          setBody(Json.encodeToString(currentMeal))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.BadRequest)
                          result = CheckResult.wrong("The meal was added twice. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 7)
          fun successAdditionCategory(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/categories") {
                          setBody(Json.encodeToString(currentCategory))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("The category was not added. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 8)
          fun failedAdditionCategory(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.post("/categories") {
                          setBody(Json.encodeToString(currentCategory))
                          header(HttpHeaders.Authorization, "Bearer $signInTokenStaff")
                          header(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                      }
                      if (response.status != HttpStatusCode.BadRequest)
                          result = CheckResult.wrong("The category was added twice. Wrong status code.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 9)
          fun getMealById(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/meals?id=${currentMeal.mealId}") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.bodyAsText() != Json.encodeToString(currentMeal))
                          result = CheckResult.wrong("Wrong meal by id.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 10)
          fun getCategoryById(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/categories?id=${currentCategory.categoryId}") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      if (response.bodyAsText() != Json.encodeToString(currentCategory))
                          result = CheckResult.wrong("Wrong category by id.")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
      
          @DynamicTest(order = 11)
          fun getMeals(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/meals") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      val meals: List<Meal> = Json.decodeFromString(response.bodyAsText() ?: "")
                      var flag = true
                      for (meal in meals) {
                          if (meal.mealId == currentMeal.mealId) {
                              flag = false
                              break
                          }
                      }
                      if (flag) {
                          result = CheckResult.wrong("Wrong meals list. The newly added meal is missing.")
                          return@testApplication
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Wrong status code in /meals")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest(order = 12)
          fun getCategories(): CheckResult {
              var result = CheckResult.correct()
              try {
                  testApplication {
                      val response = client.get("/categories") {
                          header(HttpHeaders.Authorization, "Bearer $signInTokenClient")
                      }
                      val categories: List<Category> = Json.decodeFromString(response.bodyAsText() ?: "")
                      var flag = true
                      for (category in categories) {
                          if (category.categoryId == currentCategory.categoryId) {
                              flag = false
                              break
                          }
                      }
                      if (flag) {
                          result = CheckResult.wrong("Wrong categories list. The newly added category is missing.")
                          return@testApplication
                      }
                      if (response.status != HttpStatusCode.OK)
                          result = CheckResult.wrong("Wrong status code in /categories")
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      }
    learner_created: false
  - name: src/models/Response.kt
    visible: true
    text: |
      package hotkitchen.models
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class Response(
          val status: String = "",
          val token: String = ""
      )
    learner_created: true
  - name: src/database/DatabaseConnection.kt
    visible: true
    text: |-
      package hotkitchen.database
      
      import hotkitchen.database.entities.UserAuthenticationEntity
      import io.ktor.server.application.*
      import org.jetbrains.exposed.sql.*
      import org.jetbrains.exposed.sql.Database
      import org.jetbrains.exposed.sql.transactions.transaction
      
      object DatabaseConnection {
          private val db = Database.connect(
              "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false",
              driver = "org.h2.Driver"
          )
      
          fun init() {
              transaction(db) {
                  addLogger(StdOutSqlLogger)
                  SchemaUtils.create(UserAuthenticationEntity)
              }
          }
      
          fun <T> execute(blk: Transaction.() -> T): T =
              transaction(db, statement = blk)
      }
      
      fun Application.setupDb() {
          DatabaseConnection.init()
      }
    learner_created: true
  - name: src/database/entities/UserInfoEntity.kt
    visible: true
    text: |-
      package hotkitchen.database.entities
      
      import org.h2.table.Table
      import org.jetbrains.exposed.dao.id.IntIdTable
      
      object UserInfoEntity : IntIdTable() {
          val name = varchar("name", 50)
          val userType = varchar("userType", 50)
          val phone = varchar("phone", 50)
          val email = varchar("email", 50)
          val address = varchar("address", 50)
      }
    learner_created: true
  - name: src/database/daos/DefaultAuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.authentication.AuthenticationDao
      import hotkitchen.authentication.UserAuthentication
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserAuthenticationEntity
      import org.jetbrains.exposed.sql.insert
      import org.jetbrains.exposed.sql.select
      
      class DefaultAuthenticationDao : AuthenticationDao {
          override fun signIn(user: UserAuthentication): String {
              var password = ""
              DatabaseConnection.execute {
                  val authentication = UserAuthenticationEntity.select {
                      UserAuthenticationEntity.email eq user.email
                      UserAuthenticationEntity.token eq user.token
                  }.singleOrNull() ?: throw InvalidEmailOrPassword
                  password = authentication[UserAuthenticationEntity.token]
              }
              return password
          }
      
          override fun signUp(user: UserAuthentication) {
              DatabaseConnection.execute {
                  if (UserAuthenticationEntity.select {
                          UserAuthenticationEntity.email eq user.email
                      }.firstOrNull() != null) {
                      throw UserAlreadyExists
                  }
                  UserAuthenticationEntity.insert {
                      it[email] = user.email
                      it[userType] = user.userType
                      it[token] = user.token
                  }
              }
          }
      
          override fun getUser(email: String): UserAuthentication? {
              var user: UserAuthentication? = null
              DatabaseConnection.execute {
                  user = UserAuthenticationEntity.select {
                      UserAuthenticationEntity.email eq email
                  }.singleOrNull()?.let {
                      UserAuthentication(
                          email = it[UserAuthenticationEntity.email],
                          token = it[UserAuthenticationEntity.token],
                          userType = it[UserAuthenticationEntity.userType],
                      )
                  }
              }
              return user
          }
      }
      
      object InvalidEmailOrPassword : Exception("Invalid email or password") {
          private fun readResolve(): Any = InvalidEmailOrPassword
      }
    learner_created: true
  - name: src/database/daos/DefaultUserDao.kt
    visible: true
    text: |-
      package hotkitchen.database.daos
      
      import hotkitchen.authentication.UserAuthentication
      import hotkitchen.database.DatabaseConnection
      import hotkitchen.database.entities.UserAuthenticationEntity
      import hotkitchen.database.entities.UserInfoEntity
      import hotkitchen.user.UserDao
      import hotkitchen.user.UserInfo
      import org.h2.engine.User
      import org.jetbrains.exposed.sql.Except
      import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
      import org.jetbrains.exposed.sql.deleteWhere
      import org.jetbrains.exposed.sql.select
      import org.jetbrains.exposed.sql.update
      
      class DefaultUserDao : UserDao {
      
          override fun getUser(email: String): UserInfo? {
              var user: UserInfo? = null
              DatabaseConnection.execute {
                  user = UserInfoEntity.select {
                      UserInfoEntity.email eq email
                  }.singleOrNull()?.let {
                      UserInfo(
                          name = it[UserInfoEntity.name],
                          userType = it[UserInfoEntity.userType],
                          phone = it[UserInfoEntity.phone],
                          email = it[UserInfoEntity.email],
                          address = it[UserInfoEntity.address],
                      )
                  }
              }
              return user
          }
      
          override fun updateUser(userInfo: UserInfo) {
              DatabaseConnection.execute {
                  UserInfoEntity.update({ UserInfoEntity.email eq userInfo.email }) {
                      it[name] = userInfo.name
                      it[userType] = userInfo.userType
                      it[phone] = userInfo.phone
                      it[address] = userInfo.address
                  }
              }
          }
      
          override fun deleteUser(email: String) {
              DatabaseConnection.execute {
                  if (UserInfoEntity.deleteWhere { UserInfoEntity.email eq email } == 0)
                      throw UserNotFoundException
              }
          }
      }
      
      object UserAlreadyExists : Exception("User already exists") {
          private fun readResolve(): Any = UserAlreadyExists
      }
      
      object UserNotFoundException : Exception("User not found") {
          private fun readResolve(): Any = UserNotFoundException
      }
    learner_created: true
  - name: src/database/entities/UserAuthenticationEntity.kt
    visible: true
    text: |-
      package hotkitchen.database.entities
      
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.Column
      
      object UserAuthenticationEntity : IntIdTable() {
          val email: Column<String> = varchar("email", 50)
          val userType: Column<String> = varchar("userType", 50)
          val token: Column<String> = varchar("password", 500)
      }
    learner_created: true
  - name: src/features/authentication/AuthenticationDao.kt
    visible: true
    text: |-
      package hotkitchen.authentication
      
      interface AuthenticationDao {
      
          fun signIn(user: UserAuthentication): String
      
          fun signUp(user: UserAuthentication)
      
          fun getUser(email: String): UserAuthentication?
      }
    learner_created: true
  - name: src/features/authentication/AuthenticationRoute.kt
    visible: true
    text: |
      package hotkitchen.authentication
      
      import com.auth0.jwt.JWT
      import com.auth0.jwt.algorithms.Algorithm
      import hotkitchen.models.Response
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.request.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      import org.apache.commons.validator.routines.EmailValidator
      import java.util.*
      
      fun Route.authenticationRoute(authenticationDao: AuthenticationDao) {
          post("/signin") {
              val userAuthentication = call.receive<UserAuthentication>()
              try {
                  val tokenAuthentication = generateToken(userAuthentication.email, userAuthentication.token, call)
                  val token = authenticationDao.signIn(userAuthentication.copy(token = tokenAuthentication))
                  call.response.status(HttpStatusCode.OK)
                  call.respondText { Json.encodeToString(Response(token = token)) }
              } catch (e: Exception) {
                  call.respondText(
                      Json.encodeToString(Response(e.message!!)),
                      ContentType.Application.Json,
                      HttpStatusCode.Forbidden
                  )
              }
          }
          post("/signup") {
              val user = call.receive<UserAuthentication>()
              try {
                  validateSignUpInfo(user)
                  val token = generateToken(user.email, user.token, call)
                  authenticationDao.signUp(user.copy(token = token))
                  call.response.status(HttpStatusCode.OK)
                  call.respondText { Json.encodeToString(Response(token = token)) }
              } catch (e: Exception) {
                  call.respondText(
                      Json.encodeToString(Response(e.message ?: "")),
                      contentType = ContentType.Application.Json,
                      HttpStatusCode.Forbidden
                  )
              }
          }
      }
      
      private object InvalidEmail : Exception("Invalid email") {
          private fun readResolve(): Any = InvalidEmail
      }
      
      private object InvalidPassword : Exception("Invalid password") {
          private fun readResolve(): Any = InvalidPassword
      }
      
      private fun String.isValidEmail(): Boolean {
          return EmailValidator.getInstance().isValid(this) && this.split("@")[0].all { it.isLetterOrDigit() }
      }
      
      private fun String.isValidPassword(): Boolean {
          return this.length >= 6 && this.any { it.isLetter() } && this.any { it.isDigit() }
      }
      
      private fun generateToken(email: String, password: String, call: ApplicationCall): String {
          val config = call.application.environment.config
          val secret = config.property("jwt.secret").getString()
      
          return JWT.create()
              .withClaim("email", email)
              .withClaim("password", password)
              .withExpiresAt(Date(System.currentTimeMillis() + 60000))
              .sign(Algorithm.HMAC256(secret))
      }
      
      private fun validateSignUpInfo(user: UserAuthentication) {
          if (!user.email.isValidEmail()) {
              throw InvalidEmail
          }
          if (!user.token.isValidPassword()) {
              throw InvalidPassword
          }
      }
    learner_created: true
  - name: src/features/authentication/UserAuthentication.kt
    visible: true
    text: |
      package hotkitchen.authentication
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserAuthentication(
          val email: String,
          val token: String,
          val userType: String
      )
    learner_created: true
  - name: src/features/user/UserDao.kt
    visible: true
    text: |-
      package hotkitchen.user
      
      interface UserDao {
      
          fun getUser(email: String): UserInfo?
      
          fun updateUser(userInfo: UserInfo)
      
          fun deleteUser(email: String)
      }
    learner_created: true
  - name: src/features/user/UserInfo.kt
    visible: true
    text: |-
      package hotkitchen.user
      
      import kotlinx.serialization.Serializable
      
      @Serializable
      data class UserInfo(
          val name: String = "",
          val userType: String = "",
          val phone: String = "",
          val email: String,
          val address: String = ""
      )
    learner_created: true
  - name: src/features/user/UserRoute.kt
    visible: true
    text: |-
      package hotkitchen.user
      
      import hotkitchen.models.Response
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.auth.*
      import io.ktor.server.auth.jwt.*
      import io.ktor.server.request.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      import kotlinx.serialization.encodeToString
      import kotlinx.serialization.json.Json
      
      fun Route.userRoute(userDao: UserDao) {
          authenticate {
              get("/me") {
                  try {
                      val email = call.principal<JWTPrincipal>()!!.payload.getClaim("email").asString()
                      val user = userDao.getUser(email)
                      call.respondText(
                          Json.encodeToString(user),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.OK
                      )
                  } catch (e: Exception) {
                      call.respondText(
                          Json.encodeToString(Response(e.message ?: "")),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.BadRequest
                      )
                  }
              }
              put("/me") {
                  try {
                      val email = call.principal<JWTPrincipal>()!!.payload.getClaim("email").asString()
                      val user = call.receive<UserInfo>()
                      validateUserInfoUpdating(email, user)
                      userDao.updateUser(user)
                      call.respondText(
                          Json.encodeToString(user),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.OK
                      )
      
                  } catch (e: Exception) {
                      call.respondText(
                          Json.encodeToString(Response(e.message ?: "")),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.BadRequest
                      )
                  }
              }
              delete("/me") {
                  try {
                      val email = call.principal<JWTPrincipal>()!!.payload.getClaim("email").asString()
                      userDao.deleteUser(email)
                      call.respondText(
                          Json.encodeToString(Response("User $email deleted successfully")),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.OK
                      )
                  } catch (e: Exception) {
                      call.respondText(
                          Json.encodeToString(Response(e.message ?: "")),
                          contentType = ContentType.Application.Json,
                          HttpStatusCode.NotFound
                      )
                  }
              }
          }
      }
      
      private fun validateUserInfoUpdating(email: String, userInfo: UserInfo) {
          if (email != userInfo.email) {
              throw ChangeEmailException
          }
      }
      
      private object ChangeEmailException : Exception("You cannot change the email") {
          private fun readResolve(): Any = ChangeEmailException
      }
    learner_created: true
  - name: src/features/validate/ValidateRoute.kt
    visible: true
    text: |-
      package hotkitchen.validate
      
      import hotkitchen.authentication.AuthenticationDao
      import hotkitchen.user.UserDao
      import io.ktor.http.*
      import io.ktor.server.application.*
      import io.ktor.server.auth.*
      import io.ktor.server.auth.jwt.*
      import io.ktor.server.response.*
      import io.ktor.server.routing.*
      
      fun Route.validateRoute(authenticationDao: AuthenticationDao) {
      
          authenticate {
              get("/validate") {
                  try {
                      val principal = call.principal<JWTPrincipal>()
                      val email = principal!!.payload.getClaim("email").asString()
                      val user = authenticationDao.getUser(email)
                      call.respond(HttpStatusCode.OK, "Hello, ${user?.userType} $email")
                  } catch (e: Exception) {
                      call.respond(HttpStatusCode.InternalServerError, e.message!!)
                  }
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/22606#comment
status: Unchecked
record: -1
